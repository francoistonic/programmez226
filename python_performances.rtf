{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Calibri;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0

\f0\fs22 \cf2 import datetime, time\
\
def read_csv( filename ):\uc0\u8232     results = []\u8232     with open( filename, 'r' ) as file:\u8232         for line in file:\u8232             line    = line.rstrip()\u8232             columns = line.split( ';' )\u8232             results.append( columns )\u8232     return results\
start  = datetime.datetime.now()\uc0\u8232 start_c = time.clock()\u8232 result = read_csv( 'sample1.csv' )\u8232 end_c = time.clock()\u8232 end    = datetime.datetime.now()\u8232 print( "user time =", (end-start).total_seconds(), 's' ) \u8232 print( "CPU time =", end_c-start_c, 's' )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\
\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 from time import perf_counter_ns, process_time_ns\uc0\u8232 from math import pi\
\
def compute( x, y ):\uc0\u8232     from math import sin, cos\u8232     return sin(x) * cos(y)\
\
pc1 = perf_counter_ns()\uc0\u8232 pt1 = process_time_ns()\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 output = "C:/Temp/output.txt"\uc0\u8232 with open( output, "w" ) as file:\u8232     n = 3000\u8232     for i in range( n+1 ):\u8232         x = pi * i / n\u8232         for j in range( n+1 ):\u8232             y = pi * j / n\u8232             f = compute( x, y )\u8232             file.write( F"\{x\};\{y\};\{f\}\\n" )\
\
pt2 = process_time_ns()\uc0\u8232 pc2 = perf_counter_ns()\u8232 print( "Process time    = ", ( pt2 - pt1 ) / 1000000000 )\u8232 print( "Process counter = ", ( pc2 - pc1 ) / 1000000000 )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\
\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 from math import pi\uc0\u8232 from logging  import ( basicConfig,\u8232                        DEBUG,\u8232                        getLogger,\u8232                        shutdown as StopLogging )\
\
def compute( x, y ):\uc0\u8232     from math import sin, cos\u8232     return sin(x) * cos(y)\
\
basicConfig( filename='example.log',\uc0\u8232              format   = "%(asctime)-15s;%(thread)d;%(levelname)s;%(filename)s;%(lineno)d;%(message)s",\u8232              level    = DEBUG )\
\
output = "C:/Temp/output.txt"\uc0\u8232 with open( output, "w" ) as file:\u8232     n = 3000\u8232     getLogger( "loop" ).debug( "before loop" )\u8232     for i in range( n+1 ):\u8232         x = pi * i / n\u8232         for j in range( n+1 ):\u8232             y = pi * j / n\u8232             f = compute( x, y )\u8232             file.write( F"\{x\};\{y\};\{f\}\\n" )\u8232     getLogger( "loop" ).debug( "after loop" )\u8232     StopLogging()\cf0 \
\
\
\cf2 def f(x):\uc0\u8232     import math\u8232     return math.cos(x) * x\
\
def build( nb ):\uc0\u8232     step   = 1.0 / nb\u8232     result = []\u8232     for i in range( nb+1 ):\u8232         x = step * i\u8232         result.append( f(x) )\u8232     return result\
\
nb     = 10000000\uc0\u8232 result = build( nb )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 import math\uc0\u8232 \
def f(x):\uc0\u8232     return math.cos(x) * x\
\
def build( nb ):\uc0\u8232     step   = 1.0 / nb\u8232     result = []\u8232     for i in range( nb+1 ):\u8232         x = step * i\u8232         result.append( f(x) )\u8232     return result\
\
nb     = 10000000\uc0\u8232 result = build( nb )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 from math import cos\uc0\u8232 \
def f(x):\uc0\u8232     return cos(x) * x\
\
def build( nb ):\uc0\u8232     step   = 1.0 / nb\u8232     result = []\u8232     for i in range( nb+1 ):\u8232         x = step * i\u8232         result.append( f(x) )\u8232     return result\
\
nb     = 10000000\uc0\u8232 result = build( nb )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 def build( nb ):\uc0\u8232     step   = 1.0 / nb\u8232     result = []\u8232     addList = result.append\u8232     for i in range( nb+1 ):\u8232         x = step * i\u8232         addList( f(x) )\u8232     return result\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 def build( nb ):\uc0\u8232     step   = 1.0 / nb\u8232     result = []\u8232     addList = result.append\u8232     for i in range( nb+1 ):\u8232         addList( f(step*i) )\u8232     return result\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0 \
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf2 def fib(n):\uc0\u8232     if n<2:\u8232         return n\u8232     return fib(n-1) + fib(n-2)\
x = [ fib(i) for i in range( 35 ) ]\uc0\u8232 print(x)\cf0 \
\
\
\cf2 from functools import lru_cache as cache\
@cache( maxsize=None )\uc0\u8232 def fib(n):\u8232     if n<2:\u8232         return n\u8232     return fib(n-1) + fib(n-2)\
x = [ fib(i) for i in range( 35 ) ]\uc0\u8232 print(x)\cf0 \
\
\cf2 from math import cos, sin, pi\uc0\u8232 \
def create1( values ):\uc0\u8232     with open( "concat1.txt", "w" ) as file:\u8232         for t in values:\u8232             text = ""\u8232             for i, x in enumerate( t ):\u8232                 if i != 0:\u8232                     text += ';'\u8232                 text += str( x )\u8232             file.write( text + '\\n' )\
\
def create2( values ):\uc0\u8232     with open( "concat2.txt", "w" ) as file:\u8232         for t in values:\u8232             file.write( ';'.join( map( str, t ) ) + '\\n' )\
\
def create3( values ):\uc0\u8232     with open( "concat3.txt", "w" ) as file:\u8232         for t in values:\u8232             file.write( "%d;%.16f;%.16f;%.16f\\n" % t )\
\
def create4( values ):\uc0\u8232     with open( "concat4.txt", "w" ) as file:\u8232         for t in values:\u8232             file.write( "\{0\};\{1\};\{2\};\{3\}\\n".format( *t ) )\
\
def create5( values ):\uc0\u8232     with open( "concat5.txt", "w" ) as file:\u8232         for i, x, c, s in values:\u8232             file.write( F"\{i\};\{x\};\{c\};\{s\}\\n" )\
\
n      = 1000000\uc0\u8232 step   = pi / n\u8232 var    = [ ( i, step * i ) for i in range( n+1 ) ]\u8232 values = [ ( i, x, cos(x), sin(x) ) for i, x in var ]\
create1( values )\uc0\u8232 create2( values )\u8232 create3( values )\u8232 create4( values )\u8232 create5( values )\
\pard\pardeftab708\ri-52\sl259\slmult1\sa160\partightenfactor0
\cf0  \
}